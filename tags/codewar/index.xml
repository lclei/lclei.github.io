<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>codewar on lclei blog</title>
    <link>http://localhost:1313/tags/codewar/</link>
    <description>Recent content in codewar on lclei blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 09 Mar 2018 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/tags/codewar/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>codewar 题1</title>
      <link>http://localhost:1313/post/codewar1/</link>
      <pubDate>Fri, 09 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/codewar1/</guid>
      <description>&lt;h1 id=&#34;大数阶乘小数位数&#34;&gt;大数，阶乘，小数位数&lt;/h1&gt;
&lt;p&gt;在codewar的一道题&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Consider the following numbers (where n! is factorial(n)):&lt;/p&gt;
&lt;p&gt;u1 = (1 / 1!) * (1!)
u2 = (1 / 2!) * (1! + 2!)
u3 = (1 / 3!) * (1! + 2! + 3!)
un = (1 / n!) * (1! + 2! + 3! + &amp;hellip; + n!)
Which will win: 1 / n! or (1! + 2! + 3! + &amp;hellip; + n!)?&lt;/p&gt;
&lt;p&gt;Are these numbers going to 0 because of 1/n! or to infinity due to the sum of factorials or to another number?&lt;/p&gt;
&lt;p&gt;Task&lt;/p&gt;
&lt;p&gt;Calculate (1 / n!) * (1! + 2! + 3! + &amp;hellip; + n!) for a given n, where n is an integer greater or equal to 1.&lt;/p&gt;
&lt;p&gt;To avoid discussions about rounding, return the result truncated to 6 decimal places, for example:&lt;/p&gt;
&lt;p&gt;1.0000989217538616 will be truncated to 1.000098&lt;br&gt;
1.2125000000000001 will be truncated to 1.2125&lt;br&gt;
Remark&lt;/p&gt;
&lt;p&gt;Keep in mind that factorials grow rather rapidly, and you need to handle large inputs.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>codewar 题3</title>
      <link>http://localhost:1313/post/codewar3/</link>
      <pubDate>Thu, 08 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/codewar3/</guid>
      <description>&lt;h1 id=&#34;codewarintervals&#34;&gt;CodeWar::Intervals&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Write a function called sumIntervals/sum_intervals() that accepts an array of intervals, and returns the sum of all the interval lengths. Overlapping intervals should only be counted once.&lt;/p&gt;
&lt;p&gt;Intervals&lt;/p&gt;
&lt;p&gt;Intervals are represented by a pair of integers in the form of an array. The first value of the interval will always be less than the second value. Interval example: [1, 5] is an interval from 1 to 5. The length of this interval is 4.&lt;/p&gt;
&lt;p&gt;Overlapping Intervals&lt;/p&gt;
&lt;p&gt;List containing overlapping intervals:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[
[1,4],
[7, 10],
[3, 5]
]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The sum of the lengths of these intervals is 7. Since [1, 4] and [3, 5] overlap, we can treat the interval as [1, 5], which has a length of 4.&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sum_intervals( {
{1,2},
{6, 10},
{11, 15}
} ); // =&amp;gt; 9&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;sum_intervals( {
{1,4},
{7, 10},
{3, 5}
} ); // =&amp;gt; 7&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;sum_intervals( {
{1,5},
{10, 20},
{1, 6},
{16, 19},
{5, 11}
} ); // =&amp;gt; 19&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;</description>
    </item>
    
  </channel>
</rss>
